######################################################################
# KLT Feature Tracker V1 - Windows Compatible Makefile
######################################################################

######################################################################
# Choose your favorite C compiler
CC = gcc
CXX = g++

######################################################################
# -DNDEBUG prevents the assert() statements from being included in 
# the code.  If you are having problems running the code, you might 
# want to comment this line to see if an assert() statement fires.
FLAG1 = -DNDEBUG

######################################################################
# -DKLT_USE_QSORT forces the code to use the standard qsort() 
# routine.  Otherwise it will use a quicksort routine that takes
# advantage of our specific data structure to greatly reduce the
# running time on some machines.  Uncomment this line if for some
# reason you are unhappy with the special routine.
# FLAG2 = -DKLT_USE_QSORT

######################################################################
# Add your favorite C flags here.
CFLAGS = $(FLAG1) $(FLAG2) -O3 -g
CXXFLAGS = $(CFLAGS)

######################################################################
# Data directory path
DATA_DIR = ../../data

######################################################################
# There should be no need to modify anything below this line (but
# feel free to if you want).

EXAMPLES = example1.c example2.c example3.c example4.c example5.c
ARCH = convolve.c error.c pnmio.c pyramid.c selectGoodFeatures.c \
       storeFeatures.c trackFeatures.c klt.c klt_util.c writeFeatures.c
LIB = -lm

.SUFFIXES:  .c .o .cpp

all:  lib klt_app.exe examples

.c.o:
	$(CC) -c $(CFLAGS) $<

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $<

lib: $(ARCH:.c=.o)
	@if exist libklt.a del libklt.a
	ar ruv libklt.a $(ARCH:.c=.o)
	@del *.o

# Main application with C++ main
klt_app.exe: lib main.o
	$(CXX) $(CXXFLAGS) -o $@ main.o -L. -lklt $(LIB)

examples: example1.exe example2.exe example3.exe example4.exe example5.exe

example1.exe: libklt.a
	$(CC) $(CFLAGS) -o $@ example1.c -L. -lklt $(LIB)

example2.exe: libklt.a
	$(CC) $(CFLAGS) -o $@ example2.c -L. -lklt $(LIB)

example3.exe: libklt.a
	$(CC) $(CFLAGS) -o $@ example3.c -L. -lklt $(LIB)

example4.exe: libklt.a
	$(CC) $(CFLAGS) -o $@ example4.c -L. -lklt $(LIB)

example5.exe: libklt.a
	$(CC) $(CFLAGS) -o $@ example5.c -L. -lklt $(LIB)

# Profiling targets
profile: lib klt_app_prof.exe
	@echo "Running profiling with gprof..."
	klt_app_prof.exe
	gprof klt_app_prof.exe gmon.out > profile_report.txt
	@echo "Profile report saved to profile_report.txt"

klt_app_prof.exe: lib main.o
	$(CXX) $(CXXFLAGS) -pg -o $@ main.o -L. -lklt $(LIB)

# Benchmark target
benchmark: klt_app.exe
	@echo "Running performance benchmark..."
	@echo "Running main application:"
	klt_app.exe

# Copy data files to current directory for testing
setup_data:
	copy "$(DATA_DIR)\*.pgm" .

depend:
	@echo "Dependency generation not implemented for Windows"

clean:
	@if exist *.o del *.o
	@if exist *.a del *.a
	@if exist example1.exe del example1.exe
	@if exist example2.exe del example2.exe
	@if exist example3.exe del example3.exe
	@if exist example4.exe del example4.exe
	@if exist example5.exe del example5.exe
	@if exist klt_app.exe del klt_app.exe
	@if exist klt_app_prof.exe del klt_app_prof.exe
	@if exist libklt.a del libklt.a
	@if exist feat*.ppm del feat*.ppm
	@if exist features.ft del features.ft
	@if exist features.txt del features.txt
	@if exist gmon.out del gmon.out
	@if exist profile_report.txt del profile_report.txt
	@if exist *.pgm del *.pgm

help:
	@echo "KLT Feature Tracker V1 - Available targets:"
	@echo "  all        - Build library and main application"
	@echo "  lib        - Build KLT library"
	@echo "  klt_app.exe - Build main application"
	@echo "  examples   - Build all example applications"
	@echo "  example1.exe-5.exe - Build individual examples"
	@echo "  profile    - Run with profiling enabled"
	@echo "  benchmark  - Run performance benchmark"
	@echo "  setup_data - Copy data files to current directory"
	@echo "  clean      - Remove generated files"
	@echo "  help       - Show this help message"